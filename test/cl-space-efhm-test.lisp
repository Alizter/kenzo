
(in-package :kenzo-test)

(in-suite :kenzo)


(test cs-hat-u-t
      (progn
	(cat:cat-init)
	(let* ((c (cat:cs-hat-u-t (cat:k-z-1)))
	       (abar (random-abar 8 4))
	       (abar-degr (apply #'+ (mapcar #'car (cat:abar-list abar))))
	       (gnrt (cat:tnpr 5 (cat:tnpr 3 (cat:gbar 3 0 '(1 2) 0 '(3) 0 '())
					   2 '(4 5))
			       abar-degr abar)))
	  (dotimes (i 5) (print (random-abar 8 4)))
	  #|
	  (cat:? c (+ 5 abar-degr) gnrt)
	  (cat:? c (cat:? c (+ 5 abar-degr) gnrt))
	  (dotimes (i 10)
	    (let ((abar (random-abar 8 4)))
	      (setf abar-degr (apply #'+ (mapcar #'car (cat:abar-list abar))))
	      (setf gnrt (cat:tnpr 5 (cat:tnpr 3 (cat:gbar 3 0 '(1 2) 0 '(3)
							   0 '()) 2 '(4 5))
				   abar-degr abar))
	      (unless (>= abar-degr 10)
		(print (cat:? c (+ 5 abar-degr) gnrt))
		(print (cat:? c (cat:? c (+ 5 abar-degr) gnrt))))))
	  (dotimes (i 10)
	    (let ((abar (random-abar 8 4)))
	      (setf abar-degr (apply #'+ (mapcar #'car (cat:abar-list abar))))
	      (setf gnrt (cat:tnpr 6 (cat:tnpr 3 (cat:gbar 3 0 '(1 2) 0 '(3)
							   0 '()) 3 '(4 5 6))
				   abar-degr abar))
	      (unless (>= abar-degr 9)
		(print (cat:? c (+ 6 abar-degr) gnrt))
		(print (cat:? c (cat:? c (+ 6 abar-degr) gnrt))))))
	  (dotimes (i 10)
	    (let ((abar (random-abar 8 4)))
	      (setf abar-degr (apply #'+ (mapcar #'car (cat:abar-list abar))))
	      (setf gnrt (cat:tnpr 5 (cat:tnpr 2 (cat:gbar 2 0 '(3) 0 '())
					       3 '(4 5 6)) abar-degr abar))
	      (unless (>= abar-degr 10)
		(print (cat:? c (+ 5 abar-degr) gnrt))
		(print (cat:? c (cat:? c (+ 5 abar-degr) gnrt))))))
	  (dotimes (i 10)
	    (let ((abar (random-abar 8 4)))
	      (setf abar-degr (apply #'+ (mapcar #'car (cat:abar-list abar))))
	      (setf gnrt (cat:tnpr 4 (cat:tnpr 2 (cat:gbar 2 0 '(3) 0 '())
					       2 '(4 5))
				   abar-degr abar))
	      (unless (>= abar-degr 11)
		(print (cat:? c (+ 4 abar-degr) gnrt))
		(print (cat:? c (cat:? c (+ 4 abar-degr) gnrt))))))
	  |#
	  )))
